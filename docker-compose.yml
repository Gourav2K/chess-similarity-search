version: "2"
services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:3.3.2  
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_BROKER_ID=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    restart: always

  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: chess_positions_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  backend:
    build:
      context: ./chess-app/app
      dockerfile: ./Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_started
      postgres:
          condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONSUMER_GROUP_ID=chess-position-search
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:password@postgres:5432/chess_positions_db
      - SPRING_R2DBC_DATABASE=chess_positions_db
      - KAFKA_TOPIC=chess_positions

  preprocessor:
    build:
      context: ./pre-processor
      dockerfile: ./Dockerfile
    env_file:
      - ./pre-processor/.env

  llmservice:
    build:
      context: ./llm-service
      dockerfile: ./Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - ./llm-service/.env

  frontend:
    build:
      context: ./chess-app-frontend
      args:
        VITE_WEBFLUX_BACKEND_URL: http://backend:8080
    ports:
      - "3000:80"
    depends_on:
      - backend

volumes:
  pgdata:
